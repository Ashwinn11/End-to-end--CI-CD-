// jenkins shared library https://github.com/vikash-kumar01/jenkins_shared_lib.git



@Library('my_lib') _ // whatever the library name that we are configuring in jenkins global pipeline libraries
pipeline {
    agent any
    parameters {
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose Create/Destroy')
        string(name: 'aws_accountId', description: 'AWS accountId', defaultValue: 'web-app')
        string(name: 'region', description: 'region of the ECR', defaultValue: 'us-east-1')
        string(name: 'repoName', description: 'RepoName of the hub', defaultValue: 'ashwiin11')
        string(name: 'cluster_name', description: 'name of the eks cluster', defaultValue: 'demo-cluster')
    }
    environment{
        ACCESS_KEY = credentials('AWS_ACCESS_KEY')
        SECRET_KEY = credentials('AWS_SECRET_KEY')
    }
    stages {
        stage('git checkout') {
            when { expression { params.action == 'create' } }
            steps {
                sh 'echo passed'
            }
        }
        stage('Unit test using shared lib') {
            when { expression { params.action == 'create' } }
            steps {
                script{
                    mvnTest()
                }
            }
        }
        stage('Integration test using shared lib') {
            when { expression { params.action == 'create' } }
            steps {
                script{
                    mvnIntegrationTest()
                }
            }
        }
        stage('Static code analysis') {
            when { expression { params.action == 'create' } }
            steps {
                script{
                    def credentials = 'sonarqube_api'
                    QualityGateStatus(credentials)
                }
            }
        }
        stage('Quality gate check') {
            when { expression { params.action == 'create' } }

            steps {
                script{
                    def credentials = 'sonarqube_api'
                    QualityGateStatus(credentials)
                }
            }
        }
        stage('Maven build') {
            when { expression { params.action == 'create' } }
            steps {
                script{
                    mvnBuild()
                }
            }

        }
        stage('Docker build using ECR') {
            when { expression { params.action == 'create' } }
            steps {
                dockerBuild("${params.aws_accountId}", "${params.region}", "${params.repoName}")
            }
        }
        stage('Docker image scan'){
            when { expression { params.action == 'create' } }
            steps{
                script {
                    dockerImageScan("${params.aws_accountId}", "${params.region}", "${params.repoName}")
                }
            }
        }
        stage('Docker image push'){
            when { expression { params.action == 'create' } }
            steps{
                script {
                    dockerImagePush("${params.aws_accountId}", "${params.region}", "${params.repoName}")
                }
            }
        }
        stage('Docker image cleanup'){
            when { expression { params.action == 'create' } }
            steps{
                script {
                    dockerImageCleanup("${params.aws_accountId}", "${params.region}", "${params.repoName}")
                }
            }
        }
        stage('create eks cluster : terraform'){
            when { expression { params.action == 'create' } }
            steps{
                script {
                    dir('eks_module'){
                        sh """
                           terraform init
                           terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.region}' --var-file=./config/terrafo
                           terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.region}' --var-file=./config/terraform.tfvars --auto-approve
                        """
                    }
                }
            }

        }
        stage('Configure eks '){
            steps{
                script{
                    sh """
                     aws configure set aws_access_key_id "$ACCESS_KEY"
                     aws configure set aws_access_key_id "$SECRET_KEY"
                     aws configure set region "${params.region}"
                     aws eks --update kube-config --name ${params.cluster_name} --region ${params.region}
                    """
                }

            }
        }
        stage('Deployment stage'){
            steps{
                script{

                }
            }

        }

    }
}