// jenkins shared library https://github.com/vikash-kumar01/jenkins_shared_lib.git



@Library('my_lib') _ // whatever the library name that we are configuring in jenkins global pipeline libraries
pipeline {
    agent any
    parameters {
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose Create/Destroy')
        string(name: 'aws_accountId', description: 'AWS accountId', defaultValue: 'web-app')
        string(name: 'region', description: 'region of the ECR', defaultValue: 'us-east-1')
        string(name: 'repoName', description: 'RepoName of the hub', defaultValue: 'ashwiin11')
    }
    stages {
        stage('git checkout') {
            when { expression { params.action == 'create' } }
            steps {
                sh 'echo passed'
            }
        }
        stage('Unit test using shared lib') {
            when { expression { params.action == 'create' } }
            steps {
                mvnTest()
            }
        }
        stage('Integration test using shared lib') {
            when { expression { params.action == 'create' } }
            steps {
                mvnIntegrationTest()
            }
        }
        stage('Static code analysis') {
            when { expression { params.action == 'create' } }
            steps {
                def credentials = 'sonarqube_api'
                staticCodeAnalysis(credentials)
            }

        }
        stage('Quality gate check') {
            when { expression { params.action == 'create' } }
            steps {
                def credentials = 'sonarqube_api'
                QualityGateStatus(credentials)
            }

        }
        stage('Maven build') {
            when { expression { params.action == 'create' } }
            steps {
                mvnBuild()
            }
        }
        stage('Docker build using ECR') {
            when { expression { params.action == 'create' } }
            steps {
                dockerBuild("${params.aws_accountId}", "${params.region}", "${params.repoName}")
            }
        }
        stage('Docker image scan'){
            when { expression { params.action == 'create' } }
            steps{
                dockerImageScan("${params.aws_accountId}", "${params.region}", "${params.repoName}")
            }
        }
        stage('Docker image push'){
            when { expression { params.action == 'create' } }
            steps{
                dockerImagePush("${params.aws_accountId}", "${params.region}", "${params.repoName}")
            }
        }
        stage('Docker image cleanup'){
            when { expression { params.action == 'create' } }
            steps{
                dockerImageCleanup("${params.aws_accountId}", "${params.region}", "${params.repoName}")
            }
        }
    }
}